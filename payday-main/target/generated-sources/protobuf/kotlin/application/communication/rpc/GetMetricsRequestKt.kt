//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: external_scaler.proto

package application.communication.rpc;

@kotlin.jvm.JvmSynthetic
inline fun getMetricsRequest(block: application.communication.rpc.GetMetricsRequestKt.Dsl.() -> kotlin.Unit): application.communication.rpc.ExternalScalerOuterClass.GetMetricsRequest =
  application.communication.rpc.GetMetricsRequestKt.Dsl._create(application.communication.rpc.ExternalScalerOuterClass.GetMetricsRequest.newBuilder()).apply { block() }._build()
object GetMetricsRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: application.communication.rpc.ExternalScalerOuterClass.GetMetricsRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: application.communication.rpc.ExternalScalerOuterClass.GetMetricsRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): application.communication.rpc.ExternalScalerOuterClass.GetMetricsRequest = _builder.build()

    /**
     * <code>.application.communication.rpc.ScaledObjectRef scaledObjectRef = 1;</code>
     */
    var scaledObjectRef: application.communication.rpc.ExternalScalerOuterClass.ScaledObjectRef
      @JvmName("getScaledObjectRef")
      get() = _builder.getScaledObjectRef()
      @JvmName("setScaledObjectRef")
      set(value) {
        _builder.setScaledObjectRef(value)
      }
    /**
     * <code>.application.communication.rpc.ScaledObjectRef scaledObjectRef = 1;</code>
     */
    fun clearScaledObjectRef() {
      _builder.clearScaledObjectRef()
    }
    /**
     * <code>.application.communication.rpc.ScaledObjectRef scaledObjectRef = 1;</code>
     * @return Whether the scaledObjectRef field is set.
     */
    fun hasScaledObjectRef(): kotlin.Boolean {
      return _builder.hasScaledObjectRef()
    }

    /**
     * <code>string metricName = 2;</code>
     */
    var metricName: kotlin.String
      @JvmName("getMetricName")
      get() = _builder.getMetricName()
      @JvmName("setMetricName")
      set(value) {
        _builder.setMetricName(value)
      }
    /**
     * <code>string metricName = 2;</code>
     */
    fun clearMetricName() {
      _builder.clearMetricName()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun application.communication.rpc.ExternalScalerOuterClass.GetMetricsRequest.copy(block: application.communication.rpc.GetMetricsRequestKt.Dsl.() -> kotlin.Unit): application.communication.rpc.ExternalScalerOuterClass.GetMetricsRequest =
  application.communication.rpc.GetMetricsRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()
