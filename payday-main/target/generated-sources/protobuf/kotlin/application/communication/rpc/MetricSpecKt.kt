//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: external_scaler.proto

package application.communication.rpc;

@kotlin.jvm.JvmSynthetic
inline fun metricSpec(block: application.communication.rpc.MetricSpecKt.Dsl.() -> kotlin.Unit): application.communication.rpc.ExternalScalerOuterClass.MetricSpec =
  application.communication.rpc.MetricSpecKt.Dsl._create(application.communication.rpc.ExternalScalerOuterClass.MetricSpec.newBuilder()).apply { block() }._build()
object MetricSpecKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: application.communication.rpc.ExternalScalerOuterClass.MetricSpec.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: application.communication.rpc.ExternalScalerOuterClass.MetricSpec.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): application.communication.rpc.ExternalScalerOuterClass.MetricSpec = _builder.build()

    /**
     * <code>string metricName = 1;</code>
     */
    var metricName: kotlin.String
      @JvmName("getMetricName")
      get() = _builder.getMetricName()
      @JvmName("setMetricName")
      set(value) {
        _builder.setMetricName(value)
      }
    /**
     * <code>string metricName = 1;</code>
     */
    fun clearMetricName() {
      _builder.clearMetricName()
    }

    /**
     * <code>int64 targetSize = 2;</code>
     */
    var targetSize: kotlin.Long
      @JvmName("getTargetSize")
      get() = _builder.getTargetSize()
      @JvmName("setTargetSize")
      set(value) {
        _builder.setTargetSize(value)
      }
    /**
     * <code>int64 targetSize = 2;</code>
     */
    fun clearTargetSize() {
      _builder.clearTargetSize()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun application.communication.rpc.ExternalScalerOuterClass.MetricSpec.copy(block: application.communication.rpc.MetricSpecKt.Dsl.() -> kotlin.Unit): application.communication.rpc.ExternalScalerOuterClass.MetricSpec =
  application.communication.rpc.MetricSpecKt.Dsl._create(this.toBuilder()).apply { block() }._build()
